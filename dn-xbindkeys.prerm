#!/bin/bash
# prerm script for dn-xbindkeys
#
# see: dh_installdeb(1)
set -e

. /usr/share/debconf/confmodule  # use debconf


# VARIABLES

# Was xbindkeys desktop launcher was installed?
# - stores result in 'RET' variable
db_get dn-xbindkeys/install-launcher
declare add_launcher="${RET}"


# PROCEDURES

# Remove local XBindKeys configuration file link from each user home directory
#  params: nil
#  prints: feedback
#  return: nil
function removeConfig () {
	local user="" user_found="no" conf_local_fp="" msg="" conf_local=""
	conf_local=".xbindkeysrc"
    local -a users
    users="$( listUsers )"
    for user in ${users} ; do
        if [ "${user_found}" = 'no' ] ; then
            echo "Removing local XBindKeys configuration files:"
            user_found='yes'
        fi
        echo -n "  User '${user}': "
        conf_local_fp="/home/${user}/${conf_local}"
        # remove old config file/link if present
        # - '-e' only returns true for regular file
        # - so need to also test for symbolic link with '-h'
        if [ -e "${conf_local_fp}" -o -h "${conf_local_fp}" ] ; then
            set +e
            rm -f "${conf_local_fp}" &>/dev/null
            if [ ${?} -eq 0 ] ; then
                msg="removed config file"
            else
                msg="ERROR -- unable to remove config file"
            fi
            set -e
            echo "${msg}"
        else
            echo "No file found"
        fi
	done  # for dir in ${dirs} ...
}
# Remove launcher links from desktop autostart directories
#  params: nil
#  prints: feedback
#  return: nil
function removeLauncher () {
	local link="" links="" user="" user_found="" launcher_filename=""
	local user_found="no" launcher_filename="dn-xbindkeys.desktop"
	links="$( find /home/*/.config/autostart -name ${launcher_filename} )"
	for link in ${links} ; do
		user="$( echo "${link}" | cut -d '/' -f 3 )"
		if [ -n "${user}" ] ; then  # sanity check
			if [ "${user_found}" = 'no' ] ; then
				echo "Removing XBindKeys desktop launcher scripts:"
				user_found='yes'
			fi
			echo -n "  User '${user}': "
			rm "${link}" &>/dev/null
			if [ -e "${link}" ] ; then  # failed to remove!
				echo "ERROR -- unable to remove launcher"
			else  # successfully removed!
				echo "removed launcher"
			fi  # if [ -e "${link}" ] ...
		fi  # if [ -n "${user}" ] ...
	done  # for link in ${links} ...
}
# List users with accounts and a home directory
#   params: nil
#   prints: space-delimited list of users
#   return: nil
function listUsers () {
    for user in $( while read line ; do echo "${line}" | \
            cut -d: -f1 ; done < /etc/passwd ) ; do \
        dir -1 /home/ | grep "\b${user}\b" | \
        grep -v "lost+found" | tr -s '\n' ; \
    done
}


# MAIN

# Handle package events
case "$1" in

'remove'|'upgrade'|'deconfigure' )

	# remove all config symlinks and any launcher symlinks
	removeConfig
	case "${add_launcher}" in
		'Yes' ) removeLauncher;;
	esac
    ;;

'failed-upgrade')

	# remove all config symlinks and any launcher symlinks
	removeConfig
	case "${add_launcher}" in
		'Yes' ) removeLauncher;;
	esac
    ;;

* )
	echo "prerm called with unknown argument \`$1'" >&2
	exit 1
    ;;

esac


# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
